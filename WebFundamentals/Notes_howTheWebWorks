_______________
DNS in detail
--------------
				What is DNS?

DNS (Domain Name System) provides a way to communicate with devices without remembering complex numbers
	Every house has an address; every computer has its own unique address (IP address)

IP address has 4 sets of digits ranging from 0-255 separated by a period

When visiting a website, it is much easier to remember tryhackme.com as opposed to 104.26.10.229



				Domain Hierarchy

TLD (Top-Level Domain) is the most righthand part of a domain, ex.) .com
	Two types: 1.) gTLD (Generic) and 2. ccTLD (Country Code)
	1. historically meant to tell users the domain name's purpose; ex. .com was for commercial use,
.org for organization, .edu for education, .gov for government
	2. used for geographical purposes; ex. .ca for Canada, .co.uk for Unitied Kingdon
Nowadays, there are many new gTLDs, such as .online, .club, .biz, etc.


Second-Level Domain - the "actual name" of the site tryhackme is SLD and .com is TLD
	- limited to 63 characters + the TLD
	- can only use a-z, 0-9, and hyphens (cannot start/end with or have consecutive hyphens)


Subdomain - left-hand side of the SLD; admin (sub) .tryhackme (SLD) .com (TLD)
	- same name creation restrictions as SLD
	- you can have multiple subdomains spli with periods to create longer names (jupiter.servers.thm.com),
	but the length must be kept to 253 characters or less (maximum length of domain name)
	- no limit on the number of subdomains that can be created for a domain name



				Record Types

A Record - resolves to an IPv4 address, ex.) 104.26.10.229

AAAA Record - resolves to an IPv6 address, ex.) 2606:4700:20::681a:be5

CNAME Record - resolves to another domain name, ex.) store.tryhackme.com returns CNAME record shops.shopify.com
	Another DNS request would then be made to shops.shopify.com to work out its IP address

MX Record - resolves to address of servers handling the email for the domain being queried ex.) MX response for
	tryhackme.com would be something like alt1.aspmx.l.google.com
	- these records come with a priority flag telling the client in which order to try the servers, which 
	could be usefule if the main server goes down and the email needs to be sent to a backup server

TXT Record - free text fields where any text-based data can be store
	- many uses, but some common ones can be to listservers with the authority to send an email on behalf
	of the domain (helps against spam/spoofed emails) and to verify ownership of the domain name when
	signing up for third party services



				Making a (DNS) Request

1. When you request a domain name, your computer first checks its local cache to see if the address has been
	recently looked up; if not, a request to your Recursive DNS Server is made

2. A Recursive DNS Server (usually provided by ISP but can also be chosen) has local cache of recently looked up domain
	names, including popular/heavily searched for sch as Google, FaceBook, Twitter, etc. If the request
	cannot be found locally, then it continues to the root DNS servers.

3. The root servers acts as the DNS backbone of the internet, by riderecting you to the correct TLD server, depending
	on the request. Ex.) A request to tryhackme.com would be reffered to the correct TLD server that deals with
	.com addresses

4. The TLD server holds records for where to find the authoritative server to answer the request (also known as the 
	nameserver). Tryhackme.com's nameserver is kip.ns.cloudflare.com and uma.ns.cloudflare.com; you will typically
	see multiply nameservers for a domain to act as a backup in case one goes down.

5. The authoritative DNS server is responsible for storing all DNS records for a particular domain name and where any 
	updates to your domain name DNS records would be made. Depending on the record type, the DNS record
	is sent back to the Recursive server, where a local copy is cached for future requests, and then relayed
	back to the original client making the request.

DNS records all come with  TTL (Time to Live) value; this is a number represented in seconds of how long the 
	response should be saved locally before having to be looked up again. (Caching saves on having to make a 
	DNS request every time we communicate with a server).


Simply put:
	Computer -> Recursive -> Root -> (TLD Server) -> Authoritative -> Computer


nslookup can be used to find record information given a type and (sub)domain
	ex.) nslookup --CNAME shop.website.thm
returns
	Server: 127.0.0.53
	Address: 127.0.0.53#53
	Non-authoritative answer:
	shop.website.thm canonical name = shops.myshopify.com

Here we see that the CNAME record points to another address, where the IP would need to be resolved with another request










_______________
HTTP in Detail
---------------

				What is HTTP(S)?

HTTP (HyperText Transfer Protocol) is a set of rules used for communicating with web servers for the transmitting
of webpage data, whether that is HTML, Images, Videos, etc.

HTTPS is the secure version of HTTP, where data is encrypted, and also provides assurance that you are talking with
	the correct web server and not something impersonating it

Tim Berners-Lee and his team developed the World Wide Web between 1989-1991



				Requests and Responses

When accessing a website, the browser needs to make a a request to a web server to access assets, but must be told
	beforehand speciically where and how to access the resources (URL)

URL (Uniform Resource Locator) - is predominantly an instruction on how to access a resource on the iternet


  1        2              3        4      5      6    7
http://user:password@tryhackme.com:80/view-room?id=1#task3
1. Schema - instructs on what protocol is used, ie HTTP, HTTPS, FTP, etc.
2. User - some services require authentication to log in
3. Host - domain name or IP address of server being accessed
4. Port - port you are conecting to, usually 80 for HTTP and 443 for HTTPS
5. Path - file name or location of resource being accessed
6. Query string - extra information sent to the requested path, ex. blog with id 1
7. Fragment - reference to a location on the actual page requested, commonly used
	for pages with long content and can link the page directly to that section

In most cases, a request contains the method, the website to access, the web server
	we are using, and from which website we are coming from (Referer)
Ex.
	GET /HTTP/1.1
	Host: tryhackme.com
	User-Agent: Mozilla/5.0 Firefox, 87.0
	Referer: https://tryhackme.com/

Above all else, a response contains the web server information, content type,
	and content length
Ex.
	HTTP/1.1 200 OK
	Server: nginx/1.15.8
	Date: Fri, 09 April 2021 13:34:03 GMT
	Content-Type: text/html
	Content-Length: 98



				HTTP Methods

Methods are a way for the client to show intended action when making a request
The two most common ones you'll deal with are GET and POST methods

GET - used for getting information from a web server
POST - used for submitting data and potentially creating new records
PUT - used for submitting data to update information
DELETE - used for deleting information/records from a web server



				HTTP Status Codes

The first line of a response always contains a status code informing the client
	of the outcome of the request and potentially how to handle it

100-199: Information Response - sent to tell the client the first part of their
	request has been accepted and they should continue sending the rest of 
	the request (Not very common nowadays)
200-299: Success - this range tells the client their request was successful
300-399: Redirection - redirect the client's request to another resource;
	this can be a different webpage or different website entirely
400-499: Client Errors - inform the client their was an error with their request
500-599: Server Errors - reserved for errors happening on the server-side, 
	usually indicates a major problem with the server handling the request

~ Common status Codes ~
200: OK - request completed successfully
201: Created - resource has been created (Ex. a new user or a new blog post)
301: Move Permanently - redirects client's browser to a new webpage or 
	tells search engines ths page has moved elsewhere and to look there instead
302: Found - (similar to 301) only a temporary and may change in the near future
400: Bad Request - tells browser something was either wrong/missing in the request;
	can be used if the web server resource expects a certain parameter that
	the client didn't send
401: Not authorized - you're not currently allowed to view the resource until
	you've been authorized with the web app (typically a username and password)
403: Forbidden - you don't have permission to view the resource, logged in or not
404: Page Not Found - page/resource you request does not exist
405: Method Not Allowed - the resource doesn't allow this method; for example,
	sending a GET request instead of a POST when creating an account
500: Internal Service Error - server has encountered some sort of error with the
	request and doesn't know how to handle it properly



				Headers

Headers are additional bits of data  you can send to server when makiong requests

Common request headers:
Host: some web servers host multiple websites so by providing the host headers you can tell it
	which you require; otherwise, you'll just receive the default website for the server
User-Agent: your browser software and version number, which helps format the
	site properly for your browser
Content-Length: when sending data to a web server in a form, the content length tells the web server
	how much data to expect in the web request, this way we ensure we're not missing any data
Accept-Encoding: tells the server what types of compression methods the browser supports so the 
	data can be made smaller for transmitting over the internet
Cookie: data sent to the server to help remember your information

Common response headers:
Set-Cookie: information to store which gets sent back to the server on each request
Cache-Control: how long to store response content in browser's cahce before it requests again
Content-Type: what type of data is being returned, ex. HTML, CSS, JS, images, etc., so the browser
	the knows how to process it
Content-Encoding: what method has been used to compress the data when sending over the internet



				Cookies

Cookies are just a small piece of data store on your computer; they are saved when you receive
	a "Set-Cookie" header, then every further request made will send the cookies back to 
	the seb server
Because HTTP is stateless (doesn't keep track of your previous request(s)), cookies remind
	the web server who you are, personal settings, and other "session' information
Cookies are most commonly used for website authentication and instead of being a clear-text
	string, is more often a unique token that isn't easily guessable










_________________
How Websites Work
-----------------



				How Wesites Work

When visiting a website, your browser makes a request to a web server asking for information about the page you are
	visiting. It responds with data that your browser uses to show the page
(A web server is simply a dedicated computer somewhere else in the world that handles your requests)

2 major components of a website:
1. Front End (Client-Side) - the way your browser renders a website
2. Back End (Server-Side) - a server that processes your request and returns a response



				HTML

Websites primary use:
HTML - to build websites and define their structure
CSS - to make sebsites look pretty by adding styling options
JavaScript - to make website interactive and implement more complex features

HyperText Markup Language - language websites are written in. Elements (also known as tags) are the "building blocks"
	of HTML pages and tell the browser how to display content

Ex. HTML components
<!DOCTYPE html> - defines the page as a HTML5 document (placed at top of file)
<html> - root element of page
<head> - information about the page (ex. page title)
<body> - defines the document's body; only contents found inside the body are shown in the browser
<h1> - defines large heading (h2, h3, onward decreases heading size)
<p> - defines a paragraph

Elements have both an opening and closing tag: ex.) <body> BODY </body>

You can view a website's source code by righ-clicking and selecting 'View Page Source'



				JavaScript

HTML is used to create website structure and content, while JS is used to control its functionality; without JS,
	a webpage would always be static

JS is added within a page's source code using <script> tags or remotely using src attribute <script src='file.js'></script>

The following finds an HTML element with an id of "demo" and changes its contents to "Hack the Planet"
	document.getElementById("demo").innerHTML = "Hack the Planet";




				Sensitive Data Exposure

This occurs when a website doesn't properly protect (or remove) sensitive clear-text information to the client, which
	is usually found in the site's frontend source code.

Sometimes web developers will leave credentials/notes for their sake, but forget to change them after deployment

When assessing a web application for security issues, one of the first things to do is review the source page
	to see if you can find exposed credentials or hidden links



				HTML Injection

This vulnerability occurs when unfiltered user input is displayed on the page; if a website fails to sanitize user input,
	an attacker could inject HTML code to manipulate appearance/functionality

General rule: Never trust user input...sanitize everything!!!










_______________________
Putting It All Together
-----------------------

				Putting It All Together

TO SUMMARIZE:
When you request a website, your computer needs to know the server's IP address it needs to talk to (which is done through
	DNS resolution). Your computer then talks to the web server using HTTP protocol (the request/response idea); the
	webserver then returns HTLM, JS, CSS, images, etc., which your browser uses to correctly format and display
	the website for you.



				Other Components

Load balancers - ensure high traffic websites can handle the load and provide a failover if a server becomes unresponsive

When requesting a website with a load balancer, the LB will receive your request first, then send it to one of the multiple
	servers behind it; it uses different algorithms to decide which server is best suited to deal with this request, including:
1. Round-robin - sent to each server in turn
2. Weighted - checks requests of each server and then sends it to the one that's least busy.

Health check - LBs perform periodic checks with each server to ensure they are running correctly; if a server doesn't respond
	appropriately (or not at all), the LB will stop sending traffic through it until it returns to normal operation


Content Delivery Network (CDN) - allows you to host static files from your website and host them across servers all over the world;
	when a user requests one of the hosted files, the CDN works out the nearest (physical) server and sends the request there,
	as opposed to, potentially, the other side of the world

Database - web servers communicate with databases to store and recall data/information; databases can range from just a simple
	text file to a complex cluster of multiple servers. Examples include: MySQL, MSSQL, MongoDB, Postgres, each with its
	unique features

Web Application Firewall (WAF) - sits between your web request and the web server; its primary purose is to protect the webserver
	from hacking or (D)DOS attacks by analyzing web requests for common attack techniques. Many WAFs implement rate limiting,
	which only allows a certain amount of requests from an IP per second.
	Requests deemed attack attempts will be dropped and never sent to the webserver.



				How Web Servers Work

Web server - software that listens for incoming connections and then uses HTTP protocol to deliver web content to clients
	(Common) examples include Apache, Nginx, NodeJS, etc.
	It delivers files from its root directory (usually /var/www/html)


Virtual hosts: Web servers can host multiple websites with different domain names; the web server software checks the hostname
	being requested and matches against its virtual hosts (most basically, just text-based configuration files). If a match
	is found, the correct website is provided; if not, the default website will be provided instead.
	(Their root directories can be mapped to different locations)

Static content, such as JS, CSS, images, etc., never changes (can also include HTML); these files are served directly from
	the web server with not changes made. 
Dynamic content can change with different requests. Consider a blog: if a new entry is created, the home page is updated with 
	the latest entry; depending on what you search for, different results may appear; and so forth.


Scripting/Backend Languages can interact with databases, call external services, process data from users, and more; 
	Examples include: PHP, Python, Ruby, NodeJS
In action:
	<?php echo $_GET["name"]; ?> will output the name of what is supplied to the "name" element


QUIZ (order of a request to a website)
1. Request tryhackme.com in browser
2. Check local cache for IP address
3. Check recursive DNS server for address
4. Query root server to find authoritative DNS server (If recursive doesn't have IP address)
5. Authoritative DNS server returns address for website
6. Request passes through WAF
7. Request passes through a LB
8. Connect on port 80 (HTTP) or 443 (HTTPS)
9. Web server receives GET request
10. Web application talks to database
11. Browser renders HTML into viewable site



















